@page "/"
@using RideTheSound.Extensions

<div style="user-select:none;">
    <svg width="99.9vw" height="99vh" viewBox="1 @min.AsString() @(curve.Length-2) @height.AsString()" @oncontextmenu:preventDefault="true">
        <defs>
            <filter id="glow" y="-40%" height="180%">
                <feGaussianBlur class="blur" result="coloredBlur" stdDeviation="1"></feGaussianBlur>
                <feMerge>
                    <feMergeNode in="coloredBlur"></feMergeNode>
                    <feMergeNode in="coloredBlur"></feMergeNode>
                    <feMergeNode in="coloredBlur"></feMergeNode>
                    <feMergeNode in="SourceGraphic"></feMergeNode>
                </feMerge>
            </filter>
            <filter id="burn" y="-40%" height="180%">
                <feGaussianBlur class="blur" result="coloredBlur" stdDeviation="0.5"></feGaussianBlur>
                <feMerge>
                    <feMergeNode in="coloredBlur"></feMergeNode>
                    <feMergeNode in="coloredBlur"></feMergeNode>
                    <feMergeNode in="coloredBlur"></feMergeNode>
                    <feMergeNode in="SourceGraphic"></feMergeNode>
                </feMerge>
            </filter>
        </defs>

        <path stroke-width="@lineWidth.AsString()" stroke="white" fill="none" d="@curveData" filter="url(#glow)"></path>

        <circle filter="url(#burn)" r="@((playerRadius - 2).AsString())" fill-opacity="0.5" fill="@playerColor" cx="@playerDrawShadow2.X.AsString()" cy="@playerDrawShadow2.Y.AsString()"></circle>
        <circle filter="url(#burn)" r="@((playerRadius - 1).AsString())" fill-opacity="0.75" fill="@playerColor" cx="@playerDrawShadow1.X.AsString()" cy="@playerDrawShadow1.Y.AsString()"></circle>
        <circle r="@playerRadius.AsString()" fill="@playerColor" cx="@playerDraw.X.AsString()" cy="@playerDraw.Y.AsString()"></circle>
    </svg>

    <div style="display:flex;position:absolute;top:0;width:100vw;font-family:Consolas;flex-direction:column;">
        <div style="display:flex;justify-content:center;pointer-events:none;height:10vh;font-size:50px;">
            @(dead ? score : Math.Round(playerX / 100, 0))<br />
        </div>

        @if (dead)
        {
            <div style="display:flex;justify-content:center;height:90vh;align-content:center;flex-direction:column;font-size:25px;">
                <center>
                    <button class="btn btn-restart" @onclick=Start>
                        Restart
                    </button>
                </center>
                @if (placement is null || lastPlay is null)
                {
                    <center>

                        @if (playerName.Length is 3)
                        {
                            <button class="btn btn-submit" @onclick=SubmitScore>
                                <input @onclick:stopPropagation=true class="playername-input @(playerName.Length is 3 ? "input-valid" : "input-invalid")" @bind-value=playerName @bind-value:event="oninput" @bind-value:after=ValidatePlayerName />
                                Submit Score
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-not-ready" disabled>
                                <input @onclick:stopPropagation=true class="playername-input @(playerName.Length is 3 ? "input-valid" : "input-invalid")" @bind-value=playerName @bind-value:event="oninput" @bind-value:after=ValidatePlayerName />
                                Submit Score
                            </button>
                        }
                    </center>
                }
                else
                {
                    <center style="-webkit-text-stroke: 1px black;">
                        You were better than @Math.Round(placement.BetterThanPercent * 100, 2)%
                    </center>
                    <center>
                        <div style="width:fit-content;-webkit-text-stroke: 1px black;">
                            @for (int i = 0; i < placement.SelfInline(lastPlay).Count(); i++)
                            {
                                var play = placement.SelfInline(lastPlay).ElementAt(i);
                                <div style="font-weight:@(play == lastPlay ? "1000" : "500");">
                                    <pre style="margin:0;">@((placement.Position - placement.FiveBetter.Length + i).ToString().PadLeft(4)). <b>@play.User</b> : @play.Score</pre>
                                </div>
                            }
                        </div>
                    </center>
                }
            </div>
        }
    </div>
</div>